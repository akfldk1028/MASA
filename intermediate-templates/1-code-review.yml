name: "🔍 Code Review Assistant"
on:
  pull_request:
    types: [opened, synchronize, reopened]
  issue_comment:
    types: [created]

jobs:
  code-review:
    if: github.event_name == 'pull_request' || (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude review'))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Get changed files
        id: changed-files
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            git diff --name-only origin/${{ github.base_ref }}..HEAD > changed_files.txt
          else
            # For issue comments, get the PR number and fetch changes
            PR_NUMBER=$(echo "${{ github.event.issue.number }}")
            gh pr diff $PR_NUMBER --name-only > changed_files.txt
          fi
          echo "Changed files:"
          cat changed_files.txt
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Claude Code Review
        id: claude-review
        uses: ./
        with:
          prompt: |
            🔍 **코드 리뷰 수행**
            
            다음 변경된 파일들을 검토해주세요:
            
            **검토 항목:**
            1. **코드 품질**: 가독성, 유지보수성, 코딩 스타일
            2. **잠재적 버그**: 로직 오류, 예외 처리 누락
            3. **성능**: 비효율적인 코드, 최적화 가능성
            4. **보안**: 보안 취약점, 입력 검증
            5. **테스트**: 테스트 커버리지, 테스트 품질
            6. **설계**: 아키텍처 패턴, SOLID 원칙
            
            **출력 형식:**
            ```
            ## 📋 코드 리뷰 결과
            
            ### ✅ 잘된 점
            - [좋은 점들 나열]
            
            ### ⚠️ 개선 사항
            #### 🐛 버그/오류
            - [파일명:라인] 설명
            
            #### 🚀 성능 개선
            - [파일명:라인] 설명
            
            #### 🔒 보안
            - [파일명:라인] 설명
            
            ### 💡 제안사항
            - [구체적인 개선 방법]
            
            ### 📊 전체 평가
            - 품질: ⭐⭐⭐⭐⭐ (5/5)
            - 복잡도: 중간
            - 위험도: 낮음
            ```
            
          allowed_tools: "Read,Grep,Bash(git diff),Bash(git log)"
          
          settings: |
            {
              "enableAllProjectMcpServers": true,
              "customInstructions": "한국어로 상세하고 건설적인 피드백 제공. 코드 예시와 함께 개선 방안 제시."
            }
            
          timeout_minutes: "15"
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            // Claude 실행 결과 파일 읽기
            let claudeOutput = "리뷰 완료";
            try {
              const logFile = '${{ steps.claude-review.outputs.execution_file }}';
              if (fs.existsSync(logFile)) {
                const logData = JSON.parse(fs.readFileSync(logFile, 'utf8'));
                claudeOutput = logData.result || "리뷰 완료";
              }
            } catch (error) {
              console.log('로그 파싱 오류:', error);
            }
            
            const comment = `## 🤖 Claude 코드 리뷰
            
${claudeOutput}

---
*🔄 리뷰를 다시 받으려면 \`@claude review\` 코멘트를 남겨주세요*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Reply to comment
        if: github.event_name == 'issue_comment'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            let claudeOutput = "리뷰 완료";
            try {
              const logFile = '${{ steps.claude-review.outputs.execution_file }}';
              if (fs.existsSync(logFile)) {
                const logData = JSON.parse(fs.readFileSync(logFile, 'utf8'));
                claudeOutput = logData.result || "리뷰 완료";
              }
            } catch (error) {
              console.log('로그 파싱 오류:', error);
            }
            
            const reply = `## 🤖 Claude 코드 리뷰 결과
            
${claudeOutput}`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: reply
            });

      - name: Upload review log
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: claude-review-log-${{ github.run_number }}
          path: ${{ steps.claude-review.outputs.execution_file }}
          retention-days: 7